<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.Nov.Host.XamarinMac</name>
    </assembly>
    <members>
        <member name="T:Nevron.Nov.Mac.NMacPrintManager">
            <summary>
            The printing manager is responsible for managing the print operation under Mac.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacPrintManager.ShowPrintDialog">
            <summary>
            Shows the print dialog. Returns true if document was printed.
            </summary>
            <returns><c>true</c>, if print dialog was shown, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Nevron.Nov.Mac.NMacPrintRecorder">
            <summary>
            Mac print recorder.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacPrintRecorder.#ctor(Nevron.Nov.UI.NPrintDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Nevron.Nov.Mac.NMacPrintRecorder"/> class.
            </summary>
            <param name="document">Document.</param>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacPrintRecorder.RecordPrinting(AppKit.NSPrintInfo)">
            <summary>
            Print this instance.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacPrintRecorder.GetMaxSize">
            <summary>
            Gets the size of the max page. (in DIPs)
            </summary>
            <returns>The max page size.</returns>
        </member>
        <member name="T:Nevron.Nov.Mac.NMacClipboardDataObjectConsumer">
            <summary>
            NMac clipboard data object consumer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacClipboardDataObjectConsumer.#ctor(AppKit.NSPasteboard)">
            <summary>
            Initializes a new instance of the <see cref="T:Nevron.Nov.Mac.NMacClipboardDataObjectConsumer"/> class.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacClipboardDataObjectConsumer.IsReadOnly">
            <summary>
            Returns true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacClipboardDataObjectConsumer.SetData(Nevron.Nov.UI.NDataFormat,System.Object)">
            <summary>
            Throws an invalid operation exception
            </summary>
            <param name="format"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacClipboardDataObjectConsumer.ContainsData(Nevron.Nov.UI.NDataFormat)">
            <summary>
            Queries whether data can be obtained in the specified format.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacClipboardDataObjectConsumer.GetFormats">
            <summary>
            Gets a list of the formats in which data can be obtained.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacClipboardDataObjectConsumer.GetData(Nevron.Nov.UI.NDataFormat)">
            <summary>
            Gets a data object in the specified format. 
            Returns null, if data in the specifiedformat does not exists or its retrieval failed.  
            Returns a format specific object instance in case the data was successfully retrived.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Mac.NNovChildWindowHost">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NNovChildWindowHost.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NNovChildWindowHost.ResizeSubviewsWithOldSize(CoreGraphics.CGSize)">
            <summary>
            Overriden to resize the subview(s) to the size of this view.
            </summary>
            <param name="oldSize"></param>
        </member>
        <member name="M:Nevron.Nov.Mac.NNovChildWindowHost.DrawRect(CoreGraphics.CGRect)">
            <summary>
            Override to draw a dummy rect.
            </summary>
            <param name="dirtyRect"></param>
        </member>
        <member name="T:Nevron.Nov.Mac.NNovWidgetHost">
            <summary>
            A MonoMac.AppKit.NSView that contains a NOV widget of a a certain type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NNovWidgetHost.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NNovWidgetHost.#ctor(Nevron.Nov.UI.NWidget)">
            <summary>
            Creates a new NNOVWidget that hosts the specified widget
            </summary>
            <param name="widget">Widget.</param>
        </member>
        <member name="P:Nevron.Nov.Mac.NNovWidgetHost.Widget">
            <summary>
            Gets the widget contained inside this host.
            </summary>
            <value>The widget.</value>
        </member>
        <member name="T:Nevron.Nov.Mac.NNovApplicationInstaller">
            <summary>
            The Mac Application Installer 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacMenuItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacMenuItem.#ctor(AppKit.NSMenuItem)">
            <summary>
            Initializer constructor
            </summary>
            <param name="nsMenuItem">Ns menu item.</param>
        </member>
        <member name="T:Nevron.Nov.Mac.NMacMenuItemCollection">
            <summary>
            Represents a collection of Mac menu items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacMenuItemCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Mac.NMacMenuItemCommandSource">
            <summary>
            A command source that can be applied to NMenuItem instances.
            It subsrcibes for the NMenuItem.Click event to execute the command with empty parameter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacMenuItemCommandSource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacMenuItemCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializer constructor
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacMenuItemCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacMenuItemCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source from the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacMenuItemCommandSource.OnMenuItemClick(System.Object,System.EventArgs)">
            <summary>
            Called when a menu item has been clicked. Calls the ExecuteCommand method
            with an empty parameter.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Mac.NMacMenuItemCommandSource.NMacMenuItemCommandSourceSchema">
            <summary>
            Schema associated with NMacMenuItemCommandSource
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacWindowState.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Mac.NMacWindowState.#ctor(AppKit.NSWindow)">
            <summary>
            Initializer constructor
            </summary>
            <param name="window">Window.</param>
        </member>
        <member name="P:Nevron.Nov.Mac.NMacWindowState.IsZoomed">
            <summary>
            Gets / sets whether the window is zoomed
            </summary>
            <value><c>true</c> if is zoomed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nevron.Nov.Mac.NMacWindowState.FrameRect">
            <summary>
            Gets / sets the window position
            </summary>
            <value>The frame rect.</value>
        </member>
        <member name="T:Nevron.Nov.Data.NCLRDataTableDataTableAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NCLRDataTableDataTableAdapter.RowCount">
            <summary>
            Gets the count of rows in the data table
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NCLRDataTableDataTableAdapter.FieldCount">
            <summary>
            Gets the count of fields in the data table
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NCLRDataTableDataTableAdapter.CanAddRow">
            <summary>
            Determines whether the data table supports the AddRow operation
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NCLRDataTableDataTableAdapter.CanInsertRow">
            <summary>
            Determines whether the data table supports the InsertRow operation
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NCLRDataTableDataTableAdapter.CanRemoveRow">
            <summary>
            Determines whether the data table supports the RemoveRow operation
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NCLRDataTableDataTableAdapter.CanAddField">
            <summary>
            Determines whether the data table supports the AddField operation
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NCLRDataTableDataTableAdapter.CanInsertField">
            <summary>
            Determines whether the data table supports the InsertField operation
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NCLRDataTableDataTableAdapter.CanRemoveField">
            <summary>
            Determines whether the data table supports the RemoveField operation
            </summary>
        </member>
        <member name="P:Nevron.Nov.Data.NCLRDataTableDataTableAdapter.CanRenameField">
            <summary>
            Determines whether the data table supports the SetFieldName operation
            </summary>
        </member>
        <member name="M:Nevron.Nov.Data.NCLRDataTableDataTableAdapter.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets the value for a given [row:field]
            </summary>
            <param name="row"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.NCLRDataTableDataTableAdapter.GetFieldIndex(System.String)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Data.NCLRDataTableDataTableAdapter.GetFieldInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
    </members>
</doc>
